# -*- coding: utf-8 -*-
"""ai_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gD95flbXZSYV9Wyz77CV8m9gAqLZF89W

🧩 1. 필수 패키지 설치
"""

pip install streamlit openai python-docx

"""🧠 2. 기준 자료 파일 만들기 (standard.txt)"""

# 기준 예시 작성
standard_text = """1. 학생은 문제를 해결하기 위해 다양한 전략을 탐색하고 적용할 수 있어야 한다.
2. 학습자는 토의와 협력을 통해 자신의 생각을 정리하고 표현할 수 있어야 한다.
3. 수업은 학생 참여 중심으로 구성되어야 하며, 평가 방법은 형성평가를 포함해야 한다."""

# 파일로 저장
with open("standard.txt", "w", encoding="utf-8") as f:
    f.write(standard_text)

"""📄 3. app.py 파일로 Streamlit 코드 저장하기"""

app_code = """
import streamlit as st
import openai

# 환경변수 또는 사용자 입력으로 API 키 설정
openai.api_key = st.text_input("🔑 OpenAI API 키를 입력하세요", type="password")

st.set_page_config(page_title="AI 기준 비교 피드백 앱")
st.title("📚 교수학습 계획서 기준 비교 피드백")

# 기준 파일 불러오기
try:
    with open("standard.txt", "r", encoding="utf-8") as f:
        standard_text = f.read()
except:
    st.error("기준 자료 파일이 없습니다. 먼저 업로드하거나 생성해 주세요.")
    standard_text = ""

# 사용자 입력
user_input = st.text_area("📝 교수학습 및 평가 계획서를 입력하세요", height=200)

# 피드백 버튼
if st.button("🤖 피드백 받기"):
    if not openai.api_key:
        st.warning("API 키를 입력해 주세요.")
    elif not user_input.strip():
        st.warning("계획서를 입력해 주세요.")
    else:
        with st.spinner("AI가 피드백을 작성 중입니다..."):
            prompt = f\"""[기준 자료]
{standard_text}

[사용자 입력]
{user_input}

위 기준 자료에 비추어 사용자 입력이 기준을 얼마나 충족하는지 평가하고 부족한 부분이 있다면 피드백을 제공해 주세요.\"""

            try:
                response = openai.ChatCompletion.create(
                    model="gpt-4",
                    messages=[
                        {"role": "user", "content": prompt}
                    ]
                )
                feedback = response["choices"][0]["message"]["content"]
                st.subheader("📌 AI 피드백 결과")
                st.write(feedback)
            except Exception as e:
                st.error(f"오류 발생: {e}")
"""

with open("app.py", "w", encoding="utf-8") as f:
    f.write(app_code)

"""🚀 4. Streamlit 앱 실행 명령

이 셀은 터미널에서 실행해야 작동합니다.
코랩에서는 안되므로 로컬 환경이나 Streamlit Community Cloud 배포에서 실행하세요.

✅ 1단계: GitHub 계정 준비

🧑‍💻 학생 안내용
GitHub는 소스코드를 저장하고 공유하는 온라인 공간입니다.

Streamlit은 GitHub에 있는 코드를 불러와 웹앱으로 바꿔줍니다.

이미 계정이 있다면 다음 단계로 넘어가세요.

📌 해야 할 일:
https://github.com 에 접속합니다.

Sign up을 클릭하고 계정을 만듭니다.

이메일 인증까지 마치면 완료입니다.

✅ 2단계: GitHub에 새 저장소(Repo) 만들기

🧑‍🏫 수업에서 설명할 내용
저장소(Repository)는 코드와 파일들을 모아두는 폴더입니다.

우리가 만든 app.py와 standard.txt를 여기에 업로드할 거예요.

📌 해야 할 일:
로그인한 상태에서 오른쪽 상단 ➕ 클릭 → New repository 선택

이름: 예) lesson-feedback-app

설명(optional): 수업용 Streamlit AI 피드백 앱

공개(☑ Public) 선택

Create repository 클릭

✅ 3단계: 만든 코드 업로드하기

방법 1: GitHub 웹사이트에서 직접 올리기
📌 해야 할 일:
저장소에 들어가서 Add file → Upload files 클릭

app.py 와 standard.txt 파일을 업로드

Commit changes 버튼 클릭

💡 코랩에서 만든 파일은 좌측 사이드바 → 파일탭에서 다운로드 후 업로드하면 됩니다.

✅ 4단계: Streamlit Cloud에 로그인 & 앱 배포

🧑‍💻 학생 안내용
이제 GitHub에 올린 코드를 Streamlit이 읽어와서 웹앱으로 만들어줄 거예요.

📌 해야 할 일:
https://streamlit.io 접속 → Sign in

GitHub 계정으로 로그인 (연동 허용)

Deploy an app 클릭

다음 정보 입력:

Repository: 본인 사용자명/lesson-feedback-app

Branch: main

File: app.py

Deploy 클릭

⏱ 약 1~2분 후 웹페이지가 생성됩니다.

✅ 5단계: 앱 접속 확인

URL은 보통 다음과 같이 생겼습니다.
https://<your-username>-lesson-feedback-app.streamlit.app

앱이 정상적으로 실행되면,

OpenAI API 키 입력창

계획서 입력창

피드백 결과 출력

모두 확인할 수 있어요.
"""

!pip install streamlit openai python-docx

# 기준 예시 작성
standard_text = """1. 학생은 문제를 해결하기 위해 다양한 전략을 탐색하고 적용할 수 있어야 한다.
2. 학습자는 토의와 협력을 통해 자신의 생각을 정리하고 표현할 수 있어야 한다.
3. 수업은 학생 참여 중심으로 구성되어야 하며, 평가 방법은 형성평가를 포함해야 한다."""

# 파일로 저장
with open("standard.txt", "w", encoding="utf-8") as f:
    f.write(standard_text)

app_code = """
import streamlit as st
import openai

# 환경변수 또는 사용자 입력으로 API 키 설정
openai.api_key = st.text_input("🔑 OpenAI API 키를 입력하세요", type="password")

st.set_page_config(page_title="AI 기준 비교 피드백 앱")
st.title("📚 교수학습 계획서 기준 비교 피드백")

# 기준 파일 불러오기
try:
    with open("standard.txt", "r", encoding="utf-8") as f:
        standard_text = f.read()
except:
    st.error("기준 자료 파일이 없습니다. 먼저 업로드하거나 생성해 주세요.")
    standard_text = ""

# 사용자 입력
user_input = st.text_area("📝 교수학습 및 평가 계획서를 입력하세요", height=200)

# 피드백 버튼
if st.button("🤖 피드백 받기"):
    if not openai.api_key:
        st.warning("API 키를 입력해 주세요.")
    elif not user_input.strip():
        st.warning("계획서를 입력해 주세요.")
    else:
        with st.spinner("AI가 피드백을 작성 중입니다..."):
            prompt = f\"""[기준 자료]
{standard_text}

[사용자 입력]
{user_input}

위 기준 자료에 비추어 사용자 입력이 기준을 얼마나 충족하는지 평가하고 부족한 부분이 있다면 피드백을 제공해 주세요.\"""

            try:
                response = openai.ChatCompletion.create(
                    model="gpt-4",
                    messages=[
                        {"role": "user", "content": prompt}
                    ]
                )
                feedback = response["choices"][0]["message"]["content"]
                st.subheader("📌 AI 피드백 결과")
                st.write(feedback)
            except Exception as e:
                st.error(f"오류 발생: {e}")
"""

with open("app.py", "w", encoding="utf-8") as f:
    f.write(app_code)
